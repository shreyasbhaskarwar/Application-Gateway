(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{334:function(t,e,a){"use strict";a.r(e);var n=a(14),o=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"tracing-log-correlation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tracing-log-correlation"}},[t._v("#")]),t._v(" Tracing, Log Correlation")]),t._v(" "),e("p",[t._v("In this section we explain how you can hook your own trace implementation into the trace subsystem.")]),t._v(" "),e("p",[t._v("If you need, you can write your own implementation for tracing / log correlation."),e("br"),t._v("\nAs a good point to start you may take a look at class "),e("code",[t._v("...logging.simpleTrace.SimpleTraceContext")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"define-class-and-bean-name"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#define-class-and-bean-name"}},[t._v("#")]),t._v(" Define class and bean name")]),t._v(" "),e("p",[t._v("Your trace implementation must implement interface "),e("code",[t._v("...logging.TraceContext")]),t._v(" and declared to be a named component with prototype scope."),e("br"),t._v("\nThe name you provide for the component must then be configured in the master configuration file."),e("br"),t._v("\nExample:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myTrace"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Scope")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableBeanFactory")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SCOPE_PROTOTYPE")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyTraceContext")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TraceContext")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"implement-methods"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implement-methods"}},[t._v("#")]),t._v(" Implement methods")]),t._v(" "),e("p",[t._v("Study the Javadoc of "),e("code",[t._v("...logging.TraceContext")]),t._v(" to understand under what conditions the methods are invoked by OAG. Implement them accordingly."),e("br"),t._v("\nIf you do not support some of the common configuration settings in the "),e("code",[t._v("traceProfile")]),t._v(":")]),t._v(" "),e("ul",[e("li",[t._v("Return the value matching the intention of your implementation. E.g. if your implementation does not support upstream trace id communication, make sure you hardcode "),e("code",[t._v("return false;")]),t._v(" in the "),e("code",[t._v("sendTraceResponse")]),t._v(" method implementation.")]),t._v(" "),e("li",[t._v("Document this in Javadoc of your class (recommended)")])]),t._v(" "),e("h2",{attrs:{id:"configure-your-custom-implementation-to-be-used-by-oag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#configure-your-custom-implementation-to-be-used-by-oag"}},[t._v("#")]),t._v(" Configure your custom implementation to be used by OAG")]),t._v(" "),e("p",[t._v("The name you provided for the component must be configured in the master configuration file, section "),e("code",[t._v("traceProfile")]),t._v(", attribute "),e("code",[t._v("type")]),t._v(" in order to be used by OAG."),e("br"),t._v("\nFor the example provided above, the required configuration is:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("traceProfile")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" myTrace\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n")])])]),e("h2",{attrs:{id:"test-your-implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test-your-implementation"}},[t._v("#")]),t._v(" Test your implementation")]),t._v(" "),e("p",[t._v("Write tests to verify functionality of your trace implementation. Start OAG and verify your trace id is found in the log and sent to downstream and upstream systems as required.")])])}),[],!1,null,null,null);e.default=o.exports}}]);